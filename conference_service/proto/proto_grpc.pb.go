// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoConferenceClient is the client API for GoConference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoConferenceClient interface {
	PostNewOrder(ctx context.Context, in *UserDataReq, opts ...grpc.CallOption) (*UserDataRes, error)
	GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*UserDataRes, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UserDataRes, error)
	DeleteOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*DeleteOrderRes, error)
	GetAllOrder(ctx context.Context, in *GetAllOrderReq, opts ...grpc.CallOption) (*GetAllOrderRes, error)
	GetTicketNumber(ctx context.Context, in *GetAllOrderReq, opts ...grpc.CallOption) (*TicketNumberRes, error)
}

type goConferenceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoConferenceClient(cc grpc.ClientConnInterface) GoConferenceClient {
	return &goConferenceClient{cc}
}

func (c *goConferenceClient) PostNewOrder(ctx context.Context, in *UserDataReq, opts ...grpc.CallOption) (*UserDataRes, error) {
	out := new(UserDataRes)
	err := c.cc.Invoke(ctx, "/proto.GoConference/PostNewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goConferenceClient) GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*UserDataRes, error) {
	out := new(UserDataRes)
	err := c.cc.Invoke(ctx, "/proto.GoConference/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goConferenceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UserDataRes, error) {
	out := new(UserDataRes)
	err := c.cc.Invoke(ctx, "/proto.GoConference/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goConferenceClient) DeleteOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*DeleteOrderRes, error) {
	out := new(DeleteOrderRes)
	err := c.cc.Invoke(ctx, "/proto.GoConference/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goConferenceClient) GetAllOrder(ctx context.Context, in *GetAllOrderReq, opts ...grpc.CallOption) (*GetAllOrderRes, error) {
	out := new(GetAllOrderRes)
	err := c.cc.Invoke(ctx, "/proto.GoConference/GetAllOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goConferenceClient) GetTicketNumber(ctx context.Context, in *GetAllOrderReq, opts ...grpc.CallOption) (*TicketNumberRes, error) {
	out := new(TicketNumberRes)
	err := c.cc.Invoke(ctx, "/proto.GoConference/GetTicketNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoConferenceServer is the server API for GoConference service.
// All implementations must embed UnimplementedGoConferenceServer
// for forward compatibility
type GoConferenceServer interface {
	PostNewOrder(context.Context, *UserDataReq) (*UserDataRes, error)
	GetOrder(context.Context, *GetOrderReq) (*UserDataRes, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UserDataRes, error)
	DeleteOrder(context.Context, *GetOrderReq) (*DeleteOrderRes, error)
	GetAllOrder(context.Context, *GetAllOrderReq) (*GetAllOrderRes, error)
	GetTicketNumber(context.Context, *GetAllOrderReq) (*TicketNumberRes, error)
	mustEmbedUnimplementedGoConferenceServer()
}

// UnimplementedGoConferenceServer must be embedded to have forward compatible implementations.
type UnimplementedGoConferenceServer struct {
}

func (UnimplementedGoConferenceServer) PostNewOrder(context.Context, *UserDataReq) (*UserDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNewOrder not implemented")
}
func (UnimplementedGoConferenceServer) GetOrder(context.Context, *GetOrderReq) (*UserDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedGoConferenceServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UserDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedGoConferenceServer) DeleteOrder(context.Context, *GetOrderReq) (*DeleteOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedGoConferenceServer) GetAllOrder(context.Context, *GetAllOrderReq) (*GetAllOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrder not implemented")
}
func (UnimplementedGoConferenceServer) GetTicketNumber(context.Context, *GetAllOrderReq) (*TicketNumberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketNumber not implemented")
}
func (UnimplementedGoConferenceServer) mustEmbedUnimplementedGoConferenceServer() {}

// UnsafeGoConferenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoConferenceServer will
// result in compilation errors.
type UnsafeGoConferenceServer interface {
	mustEmbedUnimplementedGoConferenceServer()
}

func RegisterGoConferenceServer(s grpc.ServiceRegistrar, srv GoConferenceServer) {
	s.RegisterService(&GoConference_ServiceDesc, srv)
}

func _GoConference_PostNewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoConferenceServer).PostNewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoConference/PostNewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoConferenceServer).PostNewOrder(ctx, req.(*UserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoConference_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoConferenceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoConference/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoConferenceServer).GetOrder(ctx, req.(*GetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoConference_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoConferenceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoConference/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoConferenceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoConference_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoConferenceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoConference/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoConferenceServer).DeleteOrder(ctx, req.(*GetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoConference_GetAllOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoConferenceServer).GetAllOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoConference/GetAllOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoConferenceServer).GetAllOrder(ctx, req.(*GetAllOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoConference_GetTicketNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoConferenceServer).GetTicketNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoConference/GetTicketNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoConferenceServer).GetTicketNumber(ctx, req.(*GetAllOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoConference_ServiceDesc is the grpc.ServiceDesc for GoConference service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoConference_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GoConference",
	HandlerType: (*GoConferenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostNewOrder",
			Handler:    _GoConference_PostNewOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _GoConference_GetOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _GoConference_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _GoConference_DeleteOrder_Handler,
		},
		{
			MethodName: "GetAllOrder",
			Handler:    _GoConference_GetAllOrder_Handler,
		},
		{
			MethodName: "GetTicketNumber",
			Handler:    _GoConference_GetTicketNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
